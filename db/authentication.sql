-- MySQL Script generated by MySQL Workbench
-- 07/18/14 15:15:51
-- Model: New Model    Version: 1.0
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema authentication
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `authentication` ;
CREATE SCHEMA IF NOT EXISTS `authentication` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `authentication` ;

-- -----------------------------------------------------
-- Table `authentication`.`permission_level_ref`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `authentication`.`permission_level_ref` ;

CREATE TABLE IF NOT EXISTS `authentication`.`permission_level_ref` (
  `level_id` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`level_id`),
  UNIQUE INDEX `level_id_UNIQUE` (`level_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `authentication`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `authentication`.`user` ;

CREATE TABLE IF NOT EXISTS `authentication`.`user` (
  `user_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `password` VARCHAR(64) NOT NULL,
  `permission_level` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `iduser_UNIQUE` (`user_id` ASC),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  INDEX `permission_level_fk_idx` (`permission_level` ASC),
  CONSTRAINT `permission_level_fk`
    FOREIGN KEY (`permission_level`)
    REFERENCES `authentication`.`permission_level_ref` (`level_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `authentication` ;

-- -----------------------------------------------------
-- procedure credentialsAreValid
-- -----------------------------------------------------

USE `authentication`;
DROP procedure IF EXISTS `authentication`.`credentialsAreValid`;

DELIMITER $$
USE `authentication`$$
CREATE PROCEDURE `credentialsAreValid` (
	IN `name_in` VARCHAR(64),
	IN `password_in` VARCHAR(64)
)
BEGIN
	SELECT
		TRUE
	FROM
		`user`
	WHERE
		`name` = `name_in` AND `password` = `password_in`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getPermissionLevel
-- -----------------------------------------------------

USE `authentication`;
DROP procedure IF EXISTS `authentication`.`getPermissionLevel`;

DELIMITER $$
USE `authentication`$$
CREATE PROCEDURE `getPermissionLevel` (
	IN `username_in` VARCHAR(64)
)
BEGIN
	SELECT `permission_level` FROM `user` WHERE `name` = `username_in`;
END$$

DELIMITER ;
SET SQL_MODE = '';
GRANT USAGE ON *.* TO cms_admin;
 DROP USER cms_admin;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'cms_admin' IDENTIFIED BY 'temp';

GRANT ALL ON authentication.* TO 'cms_admin';
SET SQL_MODE = '';
GRANT USAGE ON *.* TO application;
 DROP USER application;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'application' IDENTIFIED BY 'lEoyuHgAig9l';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `authentication`.`permission_level_ref`
-- -----------------------------------------------------
START TRANSACTION;
USE `authentication`;
INSERT INTO `authentication`.`permission_level_ref` (`level_id`) VALUES ('basic');
INSERT INTO `authentication`.`permission_level_ref` (`level_id`) VALUES ('admin');
INSERT INTO `authentication`.`permission_level_ref` (`level_id`) VALUES ('super');

COMMIT;

